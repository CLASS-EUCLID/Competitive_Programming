#include <bits/stdc++.h>

using namespace std;

int n;
vector<int> v(500000,0);
int stop;
int sum;
int iterations;



bool isSquare(uint64_t x) {
    if (x == 0)
        return false;

    // Use long double for better precision.
    long double root = sqrtl((long double)x);
    // Get the floor of the square root.
    uint64_t t = (uint64_t)root;

    // Adjust in case of floating-point imprecision.
    // If (t+1)^2 is still <= x, increment t.
    if ((t + 1) * (t + 1) <= x)
        t++;
    // If t^2 is greater than x, decrement t.
    while (t * t > x && t > 0)
        t--;

    return (t * t == x);
}


int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int t;
    cin >> t;
    while(t--)
    {
        cin >> n;
        uint64_t ti;
        if(n%2==0)
        {
            ti = (uint64_t)(n)/2*(n+1);
        }
        else
            ti = (uint64_t)(n+1)/2*n;
        if(isSquare(ti))
        {
            cout << "-1\n";
            continue;
        }
        int i = 1;
        while(i <= n)
        {
            uint64_t io;
            if(i%2==0)
            {
                io = (uint64_t)(i)/2*(i+1);
            }
            else
                io = (uint64_t)(i+1)/2*i;
            if(isSquare(io))
            {
                cout << i+1 << " " << i << " ";
                i+=2;
            }
            else{
                cout << i << " ";
                i++;
            }

        }
        cout << "\n";
    }
    return 0;
}
